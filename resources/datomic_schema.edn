{:olyp/main-schema
 {:txes
  [[{:db/id #db/id[:db.part/db]
     :db/ident :user/public-id
     :db/valueType :db.type/uuid
     :db/cardinality :db.cardinality/one
     :db/unique :db.unique/value
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/email
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/unique :db.unique/value
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/name
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/zip
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/city
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/bcrypt-password
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/auth-token
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :bookable-room/name
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :room-booking/from-date
     :db/valueType :db.type/instant
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-booking/to-date
     :db/valueType :db.type/instant
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-booking/user
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-booking/bookable-room
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :rentable-room/name
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :room-rental/user
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-rental/rentable-room
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :invoice/number
     :db/valueType :db.type/bigint
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :invoice/user
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :invoice-line-item/quantity
     :db/valueType :db.type/bigint
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :invoice-line-item/description
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :invoice-line-item/unit-price
     :db/valueType :db.type/bigint
     :db/cardinality :db.cardinality/one
     :db/doc "Stored as (* 100 price) as int, so we can (/ 100 price) to get the actual decimal value."
     :db.install/_attribute :db.part/db}


    {:db/id #db/id[:db.part/user]
     :db/ident :optimistic-add
     :db/doc ":db/add with optimistic locking based on client-t"
     :db/fn #db/fn {:lang "clojure"
                    :params [db client-t eid updates]
                    :code (do
                            (doseq [[attr val] updates]
                              (let [t (-> (datomic.api/q '[:find ?tx :in $ ?eid ?attr :where [?eid ?attr _ ?tx]] db eid attr)
                                          ffirst
                                          datomic.api/tx->t)]
                                (if (not= t client-t)
                                  (throw (Exception. (str "Attribute " attr " optimistically locked! Client version is " client-t ", database version is " t "."))))))

                            (let [client-ent (datomic.api/entity (datomic.api/as-of db client-t) eid)]
                              (->> updates
                                   (filter (fn [[attr val]] (not= val (attr client-ent))))
                                   (map (fn [[attr val]] [:db/add eid attr val])))))}}]]}}
