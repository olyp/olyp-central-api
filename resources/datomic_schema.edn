{:olyp/main-schema
 {:txes
  [[{:db/id #db/id[:db.part/db]
     :db/ident :user/public-id
     :db/valueType :db.type/uuid
     :db/cardinality :db.cardinality/one
     :db/unique :db.unique/value
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/email
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/unique :db.unique/value
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/name
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/zip
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/city
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/bcrypt-password
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :user/auth-token
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :reservable-room/public-id
     :db/valueType :db.type/uuid
     :db/cardinality :db.cardinality/one
     :db/unique :db.unique/value
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :reservable-room/name
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :room-reservation/public-id
     :db/valueType :db.type/uuid
     :db/unique :db.unique/value
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-reservation/reservable-room
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-reservation/from
     :db/valueType :db.type/instant
     :db/index true
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-reservation/to
     :db/valueType :db.type/instant
     :db/index true
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-reservation/ref
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/db]
     :db/ident :room-booking/public-id
     :db/valueType :db.type/uuid
     :db/unique :db.unique/value
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}

    {:db/id #db/id[:db.part/db]
     :db/ident :room-booking/user
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db.install/_attribute :db.part/db}




    {:db/id #db/id[:db.part/user]
     :db/ident :optimistic-add
     :db/doc ":db/add with optimistic locking based on client-t"
     :db/fn #db/fn {:lang "clojure"
                    :params [db client-t eid updates]
                    :code (do
                            (doseq [[attr val] updates]
                              (let [t (-> (datomic.api/q '[:find ?tx :in $ ?eid ?attr :where [?eid ?attr _ ?tx]] db eid attr)
                                          ffirst
                                          datomic.api/tx->t)]
                                (if (> t client-t)
                                  (throw (Exception. (str "Attribute " attr " optimistically locked! Client version is " client-t ", database version is " t "."))))))

                            (let [client-ent (datomic.api/entity (datomic.api/as-of db client-t) eid)]
                              (->> updates
                                   (filter (fn [[attr val]] (not= val (attr client-ent))))
                                   (map (fn [[attr val]] [:db/add eid attr val])))))}}

    {:db/id #db/id[:db.part/user]
     :db/ident :set-room-reservation-range
     :db/doc ":db/add for from/to of a reservation"
     :db/fn #db/fn {:lang "clojure"
                    :params [db eid reservation-ref from to]
                    :code (do
                            (if (<= 0 (compare from to))
                              (throw (Exception. "Cannot create a reservation that ends before it starts")))

                            (let [reservable-room (datomic.api/entity db reservation-ref)]
                              (if-let [conflicting-from (datomic.api/q
                                                         '[:find ?room-reservation .
                                                           :in $ ?from ?to ?reservable-room-e
                                                           :where
                                                           [?room-reservation :room-reservation/reservable-room ?reservable-room-e]
                                                           [?room-reservation :room-reservation/from ?reservation-date-val]
                                                           [(<= ?from ?reservation-date-val)]
                                                           [(> ?to ?reservation-date-val)]]
                                                         db from to (:db/id reservable-room))]
                                (throw (Exception. (str "This reservation conflicts with another reservation (" conflicting-from ")"))))

                              (if-let [conflicting-to (datomic.api/q
                                                       '[:find ?room-reservation .
                                                         :in $ ?from ?to ?reservable-room-e
                                                         :where
                                                         [?room-reservation :room-reservation/reservable-room ?reservable-room-e]
                                                         [?room-reservation :room-reservation/to ?reservation-date-val]
                                                         [(< ?from ?reservation-date-val)]
                                                         [(>= ?to ?reservation-date-val)]]
                                                       db from to (:db/id reservable-room))]
                                (throw (Exception. (str "This reservation conflicts with another reservation (" conflicting-to ")"))))

                              [[:db/add eid :room-reservation/from from]
                               [:db/add eid :room-reservation/to to]
                               [:db/add eid :room-reservation/reservable-room (:db/id reservable-room)]]))}}]]}
 }
